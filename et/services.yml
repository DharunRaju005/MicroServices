# version: '3.8'
# services:
#   zookeeper:
#     image: confluentinc/cp-zookeeper:7.4.4
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000
#     ports:
#       - 2181:2181
#     networks:
#       - app-network

#   kafka:
#     image: confluentinc/cp-kafka:7.4.4
#     depends_on:
#       - zookeeper
#     ports:
#       - 9092:9092
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
#       KAFKA_LISTENERS: PLAINTEXT://:9092
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#       KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#     networks:
#       - app-network

#   mysql:
#     image: mysql:8.3.0
#     container_name: mysql-8.3.0
#     restart: always
#     environment:
#       MYSQL_USER: test
#       MYSQL_ROOT_USER: root
#       MYSQL_PASSWORD: 'password'
#       MYSQL_ROOT_PASSWORD: 'password'
#       MYSQL_DATABASE: authservice
#     ports:
#       - '3306:3306'
#     expose:
#       - '3306'
#     volumes:
#       - mysql-db:/var/lib/mysql
#       - ./init.sql:/docker-entrypoint-initdb.d/init.sql
#     networks:
#       - app-network
#     healthcheck:
#       test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword"]
#       interval: 10s
#       timeout: 5s
#       retries: 10
#       start_period: 30s

# volumes:
#   mysql-db:
#     driver: local

# networks:
#   app-network:
#     driver: bridge
version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - kong-network

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kong-network

  mysql:
    image: mysql:8.3.0
    container_name: mysql-8.3.0
    restart: always
    environment:
      MYSQL_USER: root
      # MYSQL_ROOT_USER: root
      # MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - mysql-db:/var/lib/mysql
    networks:
      - kong-network

  user-service:
    image: user-service
    container_name: user-service
    ports:
      - '9810:9810'
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DB: userservice
    depends_on:
      - kafka
      - mysql
      - auth-service
    networks:
      - kong-network

  auth-service:
    image: auth-service
    container_name: auth-service
    ports:
      - '9898:9811'
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DB: authservice
    depends_on:
      - kafka
      - mysql
    networks:
      - kong-network

  expense-service:
    image: expense-service
    container_name: expense-service
    ports: 
      - '9820:9820'
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DB: expenseservice
    depends_on:
      - kafka
      - mysql
    networks:
      - kong-network

  ds-service:
    image: ds-service
    container_name: ds-service
    ports:
      - '8010:8010'
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      OPENAI_API_KEY: fill ur apikey here from mistral
      ENV FLASK_ENV: development
    depends_on:
      - kafka
      - mysql
      - expense-service
      - user-service
    networks:
      - kong-network

  kong-service:
    image: kong:latest
    volumes:
      - "./config:/usr/local/kong/declarative"
    environment:
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001,0.0.0.0:8444 ssl
      KONG_ADMIN_GUI_URL: http://localhost:7002
      KONG_LOG_LEVEL: debug
      KONG_PLUGINS: bundled
    ports:
      - 8005:8000 # proxy
      - 127.0.0.1:7990:8001
      - 8443:8443 # proxy ssl
      - 8001:8001 # admin
      - 127.0.0.1:8444:8444 # admin ssl
      - 7002:8002  # GUI
    depends_on:
      - auth-service

volumes:
  mysql-db:
    driver: local

networks:
  kong-network:
    external: true
